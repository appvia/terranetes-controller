---
apiVersion: terraform.appvia.io/v1alpha1
kind: Configuration
metadata:
  name: bucket
spec:
  ## Using a public repository
  module: https://github.com/terraform-aws-modules/terraform-aws-s3-bucket.git?ref=v3.10.1
  ##
  ## If you need to use a private git repository, use the git format as below
  ##
  # module: git::ssh://git@github.com/ORG/REPOSITORY?ref=<TAG|BRANCH|COMMIT>
  ##
  ## For private repositories we need credentials. Assuming the source is git you can use the
  ## command: $ kubectl -n NAMESPACE create secret generic ssh-key --from-file=SSH_KEY_AUTH=ida.rsa
  ## to push the private key and then reference secret in the auth as below. For HTTP authentication
  ## $ kubectl -n NAMESPACE create secret generic auth --from-literal=GIT_USERNAME=git --from-literal=GIT_PASSWORD=pass
  #
  # auth:
  #   name: ssh-key
  #
  ## All module references have the ability to extract specific folders from within the source. Similar
  ## to terraform module syntax use the '//PATH/TO/DIRECTORY. Lets assume you wish to extract modules/bucket from
  ## a repository github.com/appvia/terraform, the module source would look like
  #
  # module: https://github.com/appvia/terraform//modules/bucket?ref=<TAG|COMMIT|BRANCH>
  #
  ## The syntax is the same regardless of the protocol, so a private git
  ## repository for the same example above would look like
  #
  # module: git::ssh://git@github.com/appvia/terraform//modules/bucket?ref=<TAG|BRANCH|COMMIT>
  #

  providerRef:
    name: aws

  ## Used when the resource being applied from a plan
  #
  # plan:
  ##  Is the name of plan to use $ kubectl get plans
  #   name: <NAME>
  ##  Is the revision of the plan to use, not setting this takes the latest
  ##  semvar version. You van list the revisions via $ kubectl get revisions
  #   revision: <VERSION>

  # Allows you to source in terraform inputs from one of more kubernetes secrets
  valueFrom:
    - # Retrieve the value from a specific context
      context: default
      # Is the key with the context resource which we should use. The translates
      # to spec.variables.KEY.value
      key: vpc
      # Is the name which the value should be presented to terraform as
      name: vpc_id
      # Indicates the value, or context is not found is optional and will not
      # fail the terraform run
      optional: true
    - # Is the name of the local kubernetes secret which contains the value
      secret: database_secret
      # Is the key inside the secret i.e. data.<NAME>
      key: DB_HOST
      # Is optional but recommended. This specifies the name of the variable
      # presented to terraform. Note, by default if left blank the key is used
      # instead. You can also remap names where i.e DB_HOST and be remapped to
      # database_hostname when consumed
      name: database_hostname
      # Indicates if the secret is optional - by default, any unresolved secret
      # will defer execution and wait for the secret to become available. By
      # setting to true, the controller will ignore a missing secret and or key
      optional: true

  writeConnectionSecretToRef:
    name: test
    keys:
      - s3_bucket_id
      - s3_bucket_arn
      - s3_bucket_region

  variables:
    # -- The name of the bucket. If omitted, Terraform will assign a random,
    # unique name
    bucket: terranetes-controller-ci-bucket
    # -- The canned ACL to apply
    acl: private
    # -- Manage S3 Bucket Ownership Controls on this bucket.
    control_object_ownership: true
    # -- Object ownership type
    object_ownership: ObjectWriter
    # -- Map containing versioning configuration
    versioning:
      enabled: true
    # -- Whether Amazon S3 should block public ACLs for this bucket
    block_public_acls: true
    # -- Whether Amazon S3 should block public bucket policies for this bucket
    block_public_policy: true
    # -- Whether Amazon S3 should ignore public ACLs for this bucket
    ignore_public_acls: true
    # -- Whether Amazon S3 should restrict public bucket policies for this
    # bucket
    restrict_public_buckets: true
    # -- Map containing server-side encryption configuration
    server_side_encryption_configuration:
      rule:
        apply_server_side_encryption_by_default:
          sse_algorithm: "aws:kms"
        bucket_key_enabled: true
